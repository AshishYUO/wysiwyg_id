class IterWrapper<T> {
    iterable: IterableIterator<T>;
    [Symbol.iterator](): IterableIterator<T> {
        return this.iterable;
    };
    constructor(
        iterable: IterableIterator<T>
    ) {
        this.iterable = iterable;
    }

    next(): IteratorResult<T> {
        const res = this.iterable.next();
        return res;
    }

    /**
     * Perform operation on each value returned by iterator
     * @param fn function to perform
     */
    forEach(fn: (_: T, index?: number) => void) {
        let index = 0;
        for (const value of this) {
            fn(value, index);
            index += 1;
        }
    }

    /**
     * Return value from iterator till condition is satisfied or 
     * till the iterator ends.
     * @param fn function for validation
     */
    takeWhile(fn: (_: T, index?: number) => boolean) {
        return function*(container) {
            let index = 0;
            for (const value of container) {
                if (!fn(value, index)) {
                    break;
                }
                index += 1;
                yield value;
            }
        }(this);
    }

    /**
     * Maps to a different value
     * @param fn function to perform transform
     */
    map<U>(fn: (_: T, index?: number) => U): IterWrapper<U> {
        return new IterWrapper<U>(
            function*(container) {
                let index = 0;
                for (const value of container) {
                    yield fn(value, index);
                    index += 1;
                }
            }(this) as IterableIterator<U>
        );
    }

    /**
     * Filter values and ignore values that does not satisfy condition
     * @param fn function to perform transform
     */
    filter(fn: (_: T, index?: number) => boolean): IterWrapper<T> {
        return new IterWrapper<T>(
            function*(container) {
                let index = 0;
                for (const value of container) {
                    if (fn(value, index)) {
                        yield value;
                    }
                    index += 1;
                }
            }(this) as IterableIterator<T>
        );
    }

    /**
     * @returns Array generated by collecting all values from iterator
     */
    collect(): Array<T> {
        return [...this.iterable];
    }
}

/**
 * Convenient iterator for nodes.
 * @param value Value to iterate towards document
 * @param fn the function that yields the next node based on current node
 * @param incl Flag for inclusive, i.e., include value for which the generator does not
 * yield value further.
 * @returns wrapper for the Iterator
 */
export function nodeIter<YieldType = HTMLElement | Node>(
    value: YieldType,
    fn: (_: YieldType) => YieldType,
    incl: boolean = false
) {
    return new NodeIterWrapper<YieldType>(
        value,
        fn,
        incl,
        (par) => par !== null
    );
}

class NodeIterWrapper<YieldType> extends IterWrapper<YieldType> implements Iterable<YieldType>  {
    constructor(
        private currNode: YieldType,
        private stride: (_: YieldType) => YieldType,
        private inclusive: boolean = false,
        private until: (_: YieldType) => boolean
    ) {
        super(undefined);
        super.iterable = function*(container) {
            while (container.until(container.currNode)) {
                const value = container.currNode;
                container.currNode = container.stride(container.currNode);
                yield value;
            }
            if (container.inclusive) {
                yield container.currNode;
            }
        }(this) as IterableIterator<YieldType>;
    }

    till(fn: (_: YieldType) => boolean) {
        this.until = fn;
        return this;
    }

    /**
     * Returns the last element returned from the iterator
     * @returns The last element from the iterator
     */
    last(): YieldType {
        let value = null;
        for (const i of this) {
            value = i;
        }
        return value;
    }
}
